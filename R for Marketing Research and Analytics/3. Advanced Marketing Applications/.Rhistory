ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
plot(mtcars$wt, mtcars$mpg,
type=1,
# pch=2,
# cex=1,
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
plot(mtcars$wt, mtcars$mpg,
type=2,
# pch=2,
# cex=1,
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
type()
plot(mtcars$wt, mtcars$mpg,
type="l",
# pch=2,
# cex=1,
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
plot(mtcars$wt)
plot(mtcars$wt, type="l")
plot(mtcars$wt)
plot(mtcars$wt, type="l")
plot(mtcars$wt, type=c("p","l"))
plot(mtcars$wt, type=c("p","l"))
plot(mtcars$wt, type=("p","l"))
plot(mtcars$wt, type="l")
plot(mtcars$wt, type="p")
plot(mtcars$wt, type="l")
plot(mtcars$wt, type=c("p","l"))
plot(mtcars$wt, type="o")
plot(mtcars$wt, type="s")
plot(mtcars$wt, type="S")
plot(mtcars$wt, type="s")
plot(mtcars$wt, type="S")
plot(mtcars$wt, type="h")
plot(mtcars$wt, type="n")
plot(mtcars$wt, type="p")     # points
plot(mtcars$wt, type="l")     # lines
plot(mtcars$wt, type="o")     # points and lines together
plot(mtcars$wt, type="s")     # stair steps
plot(mtcars$wt, type="S")     # stair steps
plot(mtcars$wt, type="h")     # histogram like vertical lines
plot(mtcars$wt, type="n")     # does not produce any points
plot(mtcars$wt, type="p")     # points
plot(mtcars$wt, type="l")     # lines
plot(mtcars$wt, type="o")     # points and lines together
plot(mtcars$wt, type="s")     # stair steps
plot(mtcars$wt, type="S")     # stair steps
plot(mtcars$wt, type="s")     # stair steps
plot(mtcars$wt, type="S")     # stair steps
plot(mtcars$wt, type="s")     # stair steps
plot(mtcars$wt, type="S")     # stair steps
plot(mtcars$wt, type="h")     # histogram like vertical lines
plot(mtcars$wt, type="n")     # does not produce any points
data(mtcars)
plot(mtcars$wt, type="p")     # points
plot(mtcars$wt, type="l")     # lines
plot(mtcars$wt, type="o")     # points and lines together
data()
data(mtcars)
dim(mtcars)      #dimension
str(mtcars)      #Internal STRucture
names(mtcars)    #Column Names
rownames(mtcars) #Row Names
dimnames(mtcars) #Row and Column Names together
head(mtcars)     #Top 6 entries
tail(mtcars)     #Last 6 entries
plot(mtcars$wt)
plot(mtcars$wt, type="p")     # points
plot(mtcars$wt, type="l")     # lines
plot(mtcars$wt, type="o")     # points and lines together
plot(mtcars$wt, type="s")     # stair steps
plot(mtcars$wt, type="S")     # stair steps
plot(mtcars$wt, type="s")     # stair steps
plot(mtcars$wt, type="S")     # stair steps
plot(mtcars$wt, type="h")     # histogram like vertical lines
plot(x=mtcars$wt, y=mtcars$mpg)
plot(mtcars$wt, mtcars$mpg,
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
plot(mtcars$wt, mtcars$mpg,
pch=2,
cex=1,
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
pch=1,
plot(mtcars$wt, mtcars$mpg,
pch=2,
cex=1,
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
plot(mtcars$wt, mtcars$mpg,
pch=1,
cex=1,
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
plot(mtcars$wt, mtcars$mpg,
pch=1,
cex=2,
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
plot(mtcars$wt, mtcars$mpg,
pch=1,
cex=3,
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
abline(h=2, lwd = 2)
plot(mtcars$wt, mtcars$mpg,
col="red"
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
plot(mtcars$wt, mtcars$mpg,
col="red",
xlab = "Weight",
ylab = "Miles Per Gallon",
main = "MPG vs. Weight")
plot(mtcars$wt,
type="p", #points
pch=1,    #point shape
cex=1,    #point size
lty=1,    #line type
lwd=1,    #line width
xlab = "Weight",
ylab = "Weight Index",
main = "Distribution of Car Weight")
x <- c(8,2,7,1,2,9,8,2,10,9)
length(x)
sum(x)
sum(x)/length(x)
mean(x)
mode(x)
median(x)
sort(x)
table(x)
max(table(x))
names(x)[max(table(x))]
y <- table(x)
class(y)
names(y)
max(y)
y
names(y)[max(table(y))]
names(y)[which(max(table(y)))]
y
names(y)
names(y)[which(y==max(table(y)))]
head(mtcars)
x <- mtcars$wt
length(x)
length(unique(x))
y <- table(x)
names(y)[which(y==max(table(y)))]
y
names(y)
max(y)
x <- c(8,2,7,1,2,9,8,2,10,9)
y <- table(x)
class(y)
y
names(y)
max(y)
names(y)[which(y==max(y)]
names(y)[which(y==max(table(y)))]
names(y)[which(y==max(y)]
names(y)[which(y==max(y))]
x <- mtcars$wt
y <- table(x)
names(y)
max(y)
y
names(y)[which(y==max(y))]
names(sort(-table(x)))[1]
mode(x)
head(cars)
hist(x)
boxplot(x)
abline(h=mean(x))
summary(x)
library(psych)
describe(x)
describe(x)
summary(x)
x <- c(8,2,7,1,2,9,8,2,10,9)
#Exploratory Data Analysis
hist(x)
boxplot(x)
sort(x)
median(x)
?table
x <- c(8,2,7,1,2,9,8,2,10,9,8)
x
names(sort(-table(x)))[1]
y <- table(x)
y
names(y)
max(y)
names(y)[which(y==max(y))]
names(table(x))[table(x)==max(table(x))]
sort(x)
library(modeest)
install.packages("modeest")
library(modeest)
mlv(x, method = "mfv")
x <- c(8,2,7,1,2,9,8,2,10,9,8)
mlv(x, method = "mfv")
mfv(x)[1]
x <- mtcars$wt
names(table(x))[table(x)==max(table(x))]
y
y
y <- table(x)
y
names(y)[which(y==max(y))]
names(table(x))[table(x)==max(table(x))]
table(is.na(mtcars))
x <- c(8,2,7,1,2,9,8,2,10,9,NA)
x
y <- table(x)
y
names(y)[which(y==max(y))]
names(table(x))[table(x)==max(table(x))]
mean(x)
x <- c(8,2,7,1,2,9,8,2,10,9)
colSums(is.na(airquality))
num_of_sample  <- 1000    #Number of Simulations
sample_size <- 40      #Sample Size
num_of_sim * sample_size
set.seed(1234) #To regenrate the same Random Numbers
set.seed(1234) #To regenrate the same Random Numbers
nor_data <- rnorm(num_of_sample * sample_size)
test_data <- matrix(nor_data, num_of_sample, sample_size)
test_data <- as.data.frame(test_data)
head(test_data)
num_of_sample  <- 1000    #Number of Simulations
sample_size <- 10      #Sample Size
set.seed(1234) #To regenrate the same Random Numbers
nor_data <- rnorm(num_of_sample * sample_size)
test_data <- matrix(nor_data, num_of_sample, sample_size)
test_data <- as.data.frame(test_data)
head(test_data)
head(test_data)
test_data$row_mean <- apply(test_data,1,mean)
head(test_data)
library(ggplot2)
library(ggplot2, warning(FALSE))
g1 <- ggplot(test_data, aes(row_mean))
g1 <- g1 + geom_histogram(binwidth = .5, fill="green", color = "black",alpha = .2)
g1 <- g1 + geom_vline( aes(xintercept = theo_mean, colour="Theoretical Mean"))
g1 <- g1 + geom_vline( aes(xintercept = mean(test_data$row_mean), colour="Sample Mean"))
g1 <- g1 + scale_colour_manual(name='Lines', values = c("Theoretical Mean"="red", "Sample Mean"="blue"))
g1 <- g1 + labs(x = "Sample Means of 1000 Simulations")
g1 <- g1 + labs(y = "Frequency")
g1 <- g1 + labs(title = "Figure 1 \n Compareing Theoretical and Sample Mean")
g1
pop_mean <- mean(pop_data)
pop_sd   <- sd(pop_data)
pop_data <- rnorm(num_of_sample * sample_size)
pop_mean <- mean(pop_data)
pop_sd   <- sd(pop_data)
set.seed(1234) #To regenrate the same Random Numbers
#Generating Data for Normal Distribution using rnorm()
pop_data <- rnorm(num_of_sample * sample_size)
#Population Mean
pop_mean <- mean(pop_data)
#Population Standard Deviation
pop_sd   <- sd(pop_data)
#Creating a matrix with 1000 (number of simulation) rows and 10 (sample size) columns
test_data <- matrix(pop_data, num_of_sample, sample_size)
#Converting the matrix into data frame
test_data <- as.data.frame(test_data)
head(test_data)
#Adding a Column "row_mean" to the data set for mean of each row
test_data$row_mean <- apply(test_data,1,mean)
head(test_data)
sample_mean <- mean(test_data$row_mean)
g1 <- ggplot(test_data, aes(row_mean))
g1 <- g1 + geom_histogram(binwidth = .5, fill="green", color = "black",alpha = .2)
g1 <- g1 + geom_vline( aes(xintercept = pop_mean, colour="Theoretical Mean"))
g1 <- g1 + geom_vline( aes(xintercept = mean(test_data$row_mean), colour="Sample Mean"))
g1 <- g1 + scale_colour_manual(name='Lines', values = c("Theoretical Mean"="red", "Sample Mean"="blue"))
g1 <- g1 + labs(x = "Sample Means of 1000 Simulations")
g1 <- g1 + labs(y = "Frequency")
g1 <- g1 + labs(title = "Figure 1 \n Compareing Theoretical and Sample Mean")
g1
sample_mean
pop_mean
num_of_sample  <- 1000    #Number of Simulations
sample_size <- 100
set.seed(1234) #To regenrate the same Random Numbers
#Generating Data for Normal Distribution using rnorm()
pop_data <- rnorm(num_of_sample * sample_size)
#Population Mean
pop_mean <- mean(pop_data)
#Population Standard Deviation
pop_sd   <- sd(pop_data)
#Creating a matrix with 1000 (number of simulation) rows and 10 (sample size) columns
test_data <- matrix(pop_data, num_of_sample, sample_size)
#Converting the matrix into data frame
test_data <- as.data.frame(test_data)
head(test_data)
#Adding a Column "row_mean" to the data set for mean of each row
test_data$row_mean <- apply(test_data,1,mean)
head(test_data)
sample_mean <- mean(test_data$row_mean)
g1 <- ggplot(test_data, aes(row_mean))
g1 <- g1 + geom_histogram(binwidth = .5, fill="green", color = "black",alpha = .2)
g1 <- g1 + geom_vline( aes(xintercept = pop_mean, colour="Theoretical Mean"))
g1 <- g1 + geom_vline( aes(xintercept = mean(test_data$row_mean), colour="Sample Mean"))
g1 <- g1 + scale_colour_manual(name='Lines', values = c("Theoretical Mean"="red", "Sample Mean"="blue"))
g1 <- g1 + labs(x = "Sample Means of 1000 Simulations")
g1 <- g1 + labs(y = "Frequency")
g1 <- g1 + labs(title = "Figure 1 \n Compareing Theoretical and Sample Mean")
g1
x <- pnorm(1000)
plot(x)
x
x <- rnorm(1000)
x
plot(x)
x <- rnorm(1000,10,20)
x
hist(x)
set.seed(1234) #To regenrate the same Random Numbers
pop_data <- rnorm(num_of_sample * sample_size, 10,20)
pop_mean <- mean(pop_data)
pop_sd   <- sd(pop_data)
test_data <- matrix(pop_data, num_of_sample, sample_size)
test_data <- as.data.frame(test_data)
head(test_data)
test_data$row_mean <- apply(test_data,1,mean)
sample_mean <- mean(test_data$row_mean)
g1 <- ggplot(test_data, aes(row_mean))
g1 <- g1 + geom_histogram(binwidth = .5, fill="green", color = "black",alpha = .2)
g1 <- g1 + geom_vline( aes(xintercept = pop_mean, colour="Theoretical Mean"))
g1 <- g1 + geom_vline( aes(xintercept = mean(test_data$row_mean), colour="Sample Mean"))
g1 <- g1 + scale_colour_manual(name='Lines', values = c("Theoretical Mean"="red", "Sample Mean"="blue"))
g1 <- g1 + labs(x = "Sample Means of 1000 Simulations")
g1 <- g1 + labs(y = "Frequency")
g1 <- g1 + labs(title = "Figure 1 \n Compareing Theoretical and Sample Mean")
g1
sample_mean
cat("Theoretical Mean        :",pop_mean,"\nSample Mean             :", sample_mean,
"\nDiff (Theo - Sample)    :", pop_mean - sample_mean)
sample_sd   <- sd(test_data$row_mean)
sample_sd
pop_sd/sqrt(sample_size)
hist(test_data$row_mean)
cat("Theoretical Standard Error        :",se,"\nStandard Deviation of Sample Mean             :", sample_sd,
"\nDiff (Theo - Sample)    :", se - sample_sd)
se <- pop_sd/sqrt(sample_size)
cat("Theoretical Standard Error        :",se,"\nStandard Deviation of Sample Mean             :", sample_sd,
"\nDiff (Theo - Sample)    :", se - sample_sd)
cat("Theoretical Standard Error               :",se,
"\nStandard Deviation of Sample Mean      :", sample_sd,
"\nDiff (Theo - Sample)                   :", se - sample_sd)
cat("Theoretical Standard Error          :",se,
"\nStandard Deviation of Sample Mean      :", sample_sd,
"\nDiff (Theo - Sample)                   :", se - sample_sd)
cat("Theoretical Standard Error            :",se,
"\nStandard Deviation of Sample Mean      :", sample_sd,
"\nDiff (Theo - Sample)                   :", se - sample_sd)
cat("Theoretical Standard Error             :",se,
"\nStandard Deviation of Sample Mean      :", sample_sd,
"\nDiff (Theo - Sample)                   :", se - sample_sd)
#Displaying Population Mean, Sample Mean and Difference between the two
cat("Theoretical Mean        :",pop_mean,"\nSample Mean             :", sample_mean,
"\nDiff (Theo - Sample)    :", pop_mean - sample_mean)
set.seed(1234)
rnorm(10)
rnorm(10)
rnorm(10)
set.seed(1234)
rnorm(10)
set.seed(1234)
rnorm(10)
set.seed(1234)
rnorm(10)
set.seed(1234)
rnorm(10)
rnorm(10)
rnorm(10)
rpois(10, 2)
rpois(10, 1)
rpois(10, 2)
rpois(10, 20)
mean(rpois(10, 1))
sd(rpois(10, 1))
var(rpois(10, 1))
mean(rpois(10, 1))
var(rpois(10, 1))
x <- rpois(10, 1)
mean(x)
var(x)
?rpois
?sample
sample(10, 4)
sample(11, 4)
sample(11)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
letters
sample(1:10)
sample(1:10, replace = TRUE)
str(lynx)
str(lynx)
install.packages("ggplot")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(gcookbook)
plot(mtcars$wt, mtcars$mpg)
qplot(mtcars$wt, mtcars$mpg)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
plot(pressure$temperature, pressure$pressure, type="l")
points(pressure$temperature, pressure$pressure)
lines(pressure$temperature, pressure$pressure/2, col="red")
points(pressure$temperature, pressure$pressure/2, col="red")
qplot(temperature, pressure, data=pressure, geom="line")
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line()
qplot(temperature, pressure, data=pressure, geom=c("line", "point"))
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
library(ggplot2)
getwd()
install.packages("arules")
install.packages("arulesviz")
install.packages("arulesViz")
library(arules)
library(arulesViz)
data("Groceries")
summary(Groceries)
class(Groceries)
inspect(head(Groceries, 3))
groc.rules <- apriori(Groceries, parameter=list(supp=0.01, conf=0.3, target="rules"))
inspect(subset(groc.rules, lift > 3))
retail.raw <- readLines("http://fimi.ua.ac.be/data/retail.dat")
write.csv(retai.raw, file = "retail_raw.csv")
write.csv(retail.raw, file = "retail_raw.csv")
head(retail.raw)
tail(retail.raw)
class(retail.raw)
summary(retail.raw)
retail.list <- strsplit(retail.raw, " ")
head(retail.list)
class(retail.list)
names(retail.list)
length(retail.list)
names(retail.list) <- paste("Trans", 1:length(retail.list), sep="")
names(retail.list)
length(retail.list)
str(retail.list)
library(car)
some(retail.list)
rm(retail.raw)
retail.trans <- as(retail.list, "transactions") # takes a few seconds
class(retail.trans)
summary(retail.trans)
rm(retail.list)
88,162* 16,470
88162*16470
=88162*16470
88162*16470
retail.rules <- apriori(retail.trans, parameter=list(supp=0.001, conf=0.4))
library(arulesViz)
plot(retail.rules)
plot(retail.rules, interactive=TRUE)
plot(retail.rules, interactive=TRUE)
plot(retail.rules, interactive=TRUE)
retail.hi <- head(sort(retail.rules, by="lift"), 50)
setwd("~/GitHub/MarketingAnalytics/R for Marketing Research and Analytics/3. Advanced Marketing Applications")
retail.raw <- readLines("http://fimi.ua.ac.be/data/retail.dat")
class(retail.raw)
head(retail.raw)
tail(retail.raw)
summary(retail.raw)
retail.list <- strsplit(retail.raw, " ")
class(retail.list)
names(retail.list)
length(retail.list)
names(retail.list) <- paste("Trans", 1:length(retail.list), sep="")
names(retail.list)
str(retail.list)
library(car)
some(retail.list)
rm(retail.raw)
retail.trans <- as(retail.list, "transactions") # takes a few seconds
library(arules)
library(arulesViz)
retail.trans <- as(retail.list, "transactions") # takes a few seconds
class(retail.trans)
summary(retail.trans)
88162*16470
rm(retail.list)
retail.rules <- apriori(retail.trans, parameter=list(supp=0.001, conf=0.4))
library(arulesViz)
plot(retail.rules)
retail.hi <- head(sort(retail.rules, by="lift"), 50)
inspect(retail.hi)
plot(retail.hi, method="graph", control=list(type="items"))
